{"ast":null,"code":"import { ADD_TO_CART, REMOVE_FROM_CART, INCREASE_QUANTITY, DECREASE_QUANTITY } from \"./types\";\nexport const addToCart = product => (dispatch, getState) => {\n  const cartItems = getState().cart.cartItems.slice();\n  let alreadyExists = false;\n  cartItems.forEach(x => {\n    if (x.id === product.id) {\n      alreadyExists = true;\n    }\n  });\n\n  if (!alreadyExists) {\n    cartItems.push({ ...product\n    });\n  }\n\n  dispatch({\n    type: ADD_TO_CART,\n    payload: {\n      cartItems\n    }\n  });\n  localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n};\nexport const removeFromCart = product => (dispatch, getState) => {\n  const cartItems = getState().cart.cartItems.slice().filter(x => x.id !== product.id);\n  dispatch({\n    type: REMOVE_FROM_CART,\n    payload: {\n      cartItems\n    }\n  });\n  localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n};\nexport const incrementToCart = product => (dispatch, getState) => {\n  const cartItems = getState().cart.cartItems.slice();\n  const selectProduct = cartItems.find(item => item.id === product.id);\n  const index = cartItems.indexOf(selectProduct);\n  const value = cartItems[index];\n  value.qty = value.qty + 1;\n  value.total = value.qty * value.netPrice;\n  dispatch({\n    type: INCREASE_QUANTITY,\n    payload: {\n      cartItems\n    }\n  });\n  localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n};\nexport const decreaseToCart = product => (dispatch, getState) => {\n  const cartItems = getState().cart.cartItems.slice();\n  const selectProduct = cartItems.find(item => item.id === product.id);\n  const index = cartItems.indexOf(selectProduct);\n  const value = cartItems[index];\n\n  if (value.qty > 1) {\n    value.qty = value.qty - 1;\n    value.total = value.qty * value.netPrice;\n  }\n\n  dispatch({\n    type: DECREASE_QUANTITY,\n    payload: {\n      cartItems\n    }\n  });\n  localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n};","map":{"version":3,"sources":["D:/NodeJs/Full-Ecommerce-template/ecommerce/ecommerce/website/src/app/store/actions/cartActions.js"],"names":["ADD_TO_CART","REMOVE_FROM_CART","INCREASE_QUANTITY","DECREASE_QUANTITY","addToCart","product","dispatch","getState","cartItems","cart","slice","alreadyExists","forEach","x","id","push","type","payload","localStorage","setItem","JSON","stringify","removeFromCart","filter","incrementToCart","selectProduct","find","item","index","indexOf","value","qty","total","netPrice","decreaseToCart"],"mappings":"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","sourcesContent":["import { ADD_TO_CART, REMOVE_FROM_CART, INCREASE_QUANTITY, DECREASE_QUANTITY } from \"./types\";\n\nexport const addToCart = (product) => (dispatch, getState) => {\n  const cartItems = getState().cart.cartItems.slice();\n  let alreadyExists = false;\n  cartItems.forEach((x) => {\n    if (x.id === product.id) {\n      alreadyExists = true;\n    }\n  });\n  if (!alreadyExists) {\n    cartItems.push({ ...product });\n  }\n  dispatch({\n    type: ADD_TO_CART,\n    payload: { cartItems },\n  });\n  localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n};\n\nexport const removeFromCart = (product) => (dispatch, getState) => {\n  const cartItems = getState().cart.cartItems.slice().filter((x) => x.id !== product.id);\n  dispatch({ type: REMOVE_FROM_CART, payload: { cartItems } });\n  localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n};\n\nexport const incrementToCart = (product) => (dispatch, getState) => {\n  const cartItems = getState().cart.cartItems.slice()\n  const selectProduct = cartItems.find(item => item.id === product.id)\n  const index = cartItems.indexOf(selectProduct)\n  const value = cartItems[index]\n  value.qty = value.qty + 1;\n  value.total = value.qty * value.netPrice;\n\n  dispatch({\n    type: INCREASE_QUANTITY,\n    payload: { cartItems },\n  });\n  localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n}\n\nexport const decreaseToCart = (product) => (dispatch, getState) => {\n  const cartItems = getState().cart.cartItems.slice()\n  const selectProduct = cartItems.find(item => item.id === product.id)\n  const index = cartItems.indexOf(selectProduct)\n  const value = cartItems[index]\n  if (value.qty > 1) {\n    value.qty = value.qty - 1;\n    value.total = value.qty * value.netPrice;\n  }\n  dispatch({ type: DECREASE_QUANTITY, payload: { cartItems } });\n  localStorage.setItem(\"cartItems\", JSON.stringify(cartItems));\n}\n\n"]},"metadata":{},"sourceType":"module"}